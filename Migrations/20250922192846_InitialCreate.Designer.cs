// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace UavRouter.Migrations
{
    [DbContext(typeof(UAVRouterContext))]
    [Migration("20250922192846_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("UavRouter.Data.FixedWingUAV", b =>
                {
                    b.Property<int>("UavId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("CruiseSpeedKph")
                        .HasColumnType("REAL");

                    b.Property<double>("FuelCapacityKg")
                        .HasColumnType("REAL");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("MaxAltitudeMeters")
                        .HasColumnType("REAL");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("PayLoadCapacityKg")
                        .HasColumnType("REAL");

                    b.Property<double>("RangeKm")
                        .HasColumnType("REAL");

                    b.Property<double>("TopSpeedKph")
                        .HasColumnType("REAL");

                    b.Property<double>("WeightKg")
                        .HasColumnType("REAL");

                    b.Property<double?>("WingSpanMeters")
                        .HasColumnType("REAL");

                    b.HasKey("UavId");

                    b.ToTable("FixedWingUAVs");

                    b.HasData(
                        new
                        {
                            UavId = 4,
                            CruiseSpeedKph = 40.0,
                            FuelCapacityKg = 2.0,
                            Make = "Autel",
                            MaxAltitudeMeters = 300.0,
                            Model = "Evo Lite",
                            Name = "RiverScout",
                            PayLoadCapacityKg = 5.0,
                            RangeKm = 10000.0,
                            TopSpeedKph = 50.0,
                            WeightKg = 3.0,
                            WingSpanMeters = 2.5
                        },
                        new
                        {
                            UavId = 5,
                            CruiseSpeedKph = 35.0,
                            FuelCapacityKg = 1.5,
                            Make = "Yuneec",
                            MaxAltitudeMeters = 250.0,
                            Model = "Typhoon H",
                            Name = "BathDrone1",
                            PayLoadCapacityKg = 4.0,
                            RangeKm = 8000.0,
                            TopSpeedKph = 45.0,
                            WeightKg = 2.5,
                            WingSpanMeters = 2.2000000000000002
                        });
                });

            modelBuilder.Entity("UavRouter.Data.FlightRoute", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("REAL");

                    b.Property<double>("EndLat")
                        .HasColumnType("REAL");

                    b.Property<double>("EndLong")
                        .HasColumnType("REAL");

                    b.Property<double>("StartLat")
                        .HasColumnType("REAL");

                    b.Property<double>("StartLong")
                        .HasColumnType("REAL");

                    b.HasKey("RouteId");

                    b.ToTable("FlightRoutes");

                    b.HasData(
                        new
                        {
                            RouteId = 1,
                            DistanceKm = 2.0,
                            EndLat = 51.381500000000003,
                            EndLong = -2.3580000000000001,
                            StartLat = 51.381300000000003,
                            StartLong = -2.359
                        },
                        new
                        {
                            RouteId = 2,
                            DistanceKm = 3.5,
                            EndLat = 51.378,
                            EndLong = -2.3620000000000001,
                            StartLat = 51.3795,
                            StartLong = -2.3599999999999999
                        },
                        new
                        {
                            RouteId = 3,
                            DistanceKm = 4.0,
                            EndLat = 51.384999999999998,
                            EndLong = -2.3599999999999999,
                            StartLat = 51.384,
                            StartLong = -2.3639999999999999
                        },
                        new
                        {
                            RouteId = 4,
                            DistanceKm = 2.5,
                            EndLat = 51.377499999999998,
                            EndLong = -2.3584999999999998,
                            StartLat = 51.375999999999998,
                            StartLong = -2.355
                        },
                        new
                        {
                            RouteId = 5,
                            DistanceKm = 3.0,
                            EndLat = 51.381999999999998,
                            EndLong = -2.3584999999999998,
                            StartLat = 51.383000000000003,
                            StartLong = -2.3624999999999998
                        },
                        new
                        {
                            RouteId = 6,
                            DistanceKm = 3.2000000000000002,
                            EndLat = 51.3825,
                            EndLong = -2.359,
                            StartLat = 51.380000000000003,
                            StartLong = -2.3559999999999999
                        },
                        new
                        {
                            RouteId = 7,
                            DistanceKm = 2.7999999999999998,
                            EndLat = 51.380000000000003,
                            EndLong = -2.3540000000000001,
                            StartLat = 51.378999999999998,
                            StartLong = -2.3570000000000002
                        },
                        new
                        {
                            RouteId = 8,
                            DistanceKm = 4.0,
                            EndLat = 51.384,
                            EndLong = -2.3639999999999999,
                            StartLat = 51.381999999999998,
                            StartLong = -2.3610000000000002
                        },
                        new
                        {
                            RouteId = 9,
                            DistanceKm = 3.5,
                            EndLat = 51.383000000000003,
                            EndLong = -2.3599999999999999,
                            StartLat = 51.381,
                            StartLong = -2.363
                        },
                        new
                        {
                            RouteId = 10,
                            DistanceKm = 2.7000000000000002,
                            EndLat = 51.3795,
                            EndLong = -2.3570000000000002,
                            StartLat = 51.378,
                            StartLong = -2.359
                        });
                });

            modelBuilder.Entity("UavRouter.Data.RotorUAV", b =>
                {
                    b.Property<int>("UavId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("CruiseSpeedKph")
                        .HasColumnType("REAL");

                    b.Property<double>("FuelCapacityKg")
                        .HasColumnType("REAL");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("MaxAltitudeMeters")
                        .HasColumnType("REAL");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumOfRotors")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PayLoadCapacityKg")
                        .HasColumnType("REAL");

                    b.Property<double>("RangeKm")
                        .HasColumnType("REAL");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TopSpeedKph")
                        .HasColumnType("REAL");

                    b.Property<double>("WeightKg")
                        .HasColumnType("REAL");

                    b.HasKey("UavId");

                    b.ToTable("RotorUAVs");

                    b.HasData(
                        new
                        {
                            UavId = 1,
                            CruiseSpeedKph = 15.0,
                            FuelCapacityKg = 0.0,
                            Make = "DJI",
                            MaxAltitudeMeters = 120.0,
                            Model = "Phantom 4",
                            Name = "SkyEye",
                            NumOfRotors = 4,
                            PayLoadCapacityKg = 2.0,
                            RangeKm = 5000.0,
                            Size = 1,
                            TopSpeedKph = 20.0,
                            WeightKg = 1.5
                        },
                        new
                        {
                            UavId = 2,
                            CruiseSpeedKph = 12.0,
                            FuelCapacityKg = 0.0,
                            Make = "Parrot",
                            MaxAltitudeMeters = 100.0,
                            Model = "Anafi",
                            Name = "BathFlyer",
                            NumOfRotors = 4,
                            PayLoadCapacityKg = 1.0,
                            RangeKm = 4000.0,
                            Size = 0,
                            TopSpeedKph = 15.0,
                            WeightKg = 0.80000000000000004
                        },
                        new
                        {
                            UavId = 3,
                            CruiseSpeedKph = 12.0,
                            FuelCapacityKg = 0.0,
                            Make = "DJI",
                            MaxAltitudeMeters = 120.0,
                            Model = "Mavic Air 2",
                            Name = "BathDrone2",
                            NumOfRotors = 4,
                            PayLoadCapacityKg = 1.0,
                            RangeKm = 6000.0,
                            Size = 0,
                            TopSpeedKph = 18.0,
                            WeightKg = 1.2
                        });
                });

            modelBuilder.Entity("UavRouter.Data.WayPoint", b =>
                {
                    b.Property<int>("WaypointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AltitudeMeters")
                        .HasColumnType("REAL");

                    b.Property<int?>("FlightRouteRouteId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<int>("RouteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WaypointId");

                    b.HasIndex("FlightRouteRouteId");

                    b.ToTable("WayPoints");

                    b.HasData(
                        new
                        {
                            WaypointId = 1,
                            AltitudeMeters = 50.0,
                            Latitude = 51.380000000000003,
                            Longitude = -2.3610000000000002,
                            RouteId = 2
                        },
                        new
                        {
                            WaypointId = 2,
                            AltitudeMeters = 55.0,
                            Latitude = 51.378999999999998,
                            Longitude = -2.3614999999999999,
                            RouteId = 2
                        },
                        new
                        {
                            WaypointId = 3,
                            AltitudeMeters = 60.0,
                            Latitude = 51.384500000000003,
                            Longitude = -2.363,
                            RouteId = 3
                        },
                        new
                        {
                            WaypointId = 4,
                            AltitudeMeters = 60.0,
                            Latitude = 51.384799999999998,
                            Longitude = -2.3614999999999999,
                            RouteId = 3
                        },
                        new
                        {
                            WaypointId = 5,
                            AltitudeMeters = 60.0,
                            Latitude = 51.384900000000002,
                            Longitude = -2.3605,
                            RouteId = 3
                        },
                        new
                        {
                            WaypointId = 6,
                            AltitudeMeters = 50.0,
                            Latitude = 51.381,
                            Longitude = -2.3574999999999999,
                            RouteId = 6
                        },
                        new
                        {
                            WaypointId = 7,
                            AltitudeMeters = 55.0,
                            Latitude = 51.381999999999998,
                            Longitude = -2.3580000000000001,
                            RouteId = 6
                        },
                        new
                        {
                            WaypointId = 8,
                            AltitudeMeters = 60.0,
                            Latitude = 51.383000000000003,
                            Longitude = -2.3620000000000001,
                            RouteId = 8
                        },
                        new
                        {
                            WaypointId = 9,
                            AltitudeMeters = 60.0,
                            Latitude = 51.383499999999998,
                            Longitude = -2.363,
                            RouteId = 8
                        },
                        new
                        {
                            WaypointId = 10,
                            AltitudeMeters = 60.0,
                            Latitude = 51.383800000000001,
                            Longitude = -2.3635000000000002,
                            RouteId = 8
                        });
                });

            modelBuilder.Entity("UavRouter.Data.WayPoint", b =>
                {
                    b.HasOne("UavRouter.Data.FlightRoute", null)
                        .WithMany("Waypoints")
                        .HasForeignKey("FlightRouteRouteId");
                });

            modelBuilder.Entity("UavRouter.Data.FlightRoute", b =>
                {
                    b.Navigation("Waypoints");
                });
#pragma warning restore 612, 618
        }
    }
}
